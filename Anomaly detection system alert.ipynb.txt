{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "32370bf0-11a0-4aa1-b33f-c6c6f6443b71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Метрика:  users_lenta\n",
      "2022-02-10 10:30:00 579\n",
      "2022-02-09 10:30:00 605\n",
      "2022-02-08 10:30:00 585\n",
      "2022-02-07 10:30:00 594\n",
      "2022-02-06 10:30:00 958\n",
      "2022-02-05 10:30:00 456\n",
      "2022-02-04 10:30:00 566\n",
      "2022-02-03 10:30:00 568\n",
      " last_week_value [605, 585, 594, 958, 456, 566, 568] \n",
      " current_value 579 \n",
      " mean_value 618.86\n",
      " diff 0.06\n",
      " is_alert 0 границы алерта 3х сигм:  473.02 764.69\n",
      " is_alert 0 границы алерта квантилей:  534.5 632.0\n",
      "----------------------------------\n",
      "Метрика:  likes\n",
      "2022-02-10 10:30:00 1440\n",
      "2022-02-09 10:30:00 1266\n",
      "2022-02-08 10:30:00 1420\n",
      "2022-02-07 10:30:00 1438\n",
      "2022-02-06 10:30:00 2169\n",
      "2022-02-05 10:30:00 1185\n",
      "2022-02-04 10:30:00 1679\n",
      "2022-02-03 10:30:00 1228\n",
      " last_week_value [1266, 1420, 1438, 2169, 1185, 1679, 1228] \n",
      " current_value 1440 \n",
      " mean_value 1483.57\n",
      " diff 0.03\n",
      " is_alert 0 границы алерта 3х сигм:  1163.77 1803.38\n",
      " is_alert 0 границы алерта квантилей:  935.5 1870.0\n",
      "----------------------------------\n",
      "Метрика:  views\n",
      "2022-02-10 10:30:00 6753\n",
      "2022-02-09 10:30:00 5946\n",
      "2022-02-08 10:30:00 6921\n",
      "2022-02-07 10:30:00 6678\n",
      "2022-02-06 10:30:00 10125\n",
      "2022-02-05 10:30:00 5632\n",
      "2022-02-04 10:30:00 7686\n",
      "2022-02-03 10:30:00 6284\n",
      " last_week_value [5946, 6921, 6678, 10125, 5632, 7686, 6284] \n",
      " current_value 6753 \n",
      " mean_value 7038.86\n",
      " diff 0.04\n",
      " is_alert 0 границы алерта 3х сигм:  5633.23 8444.49\n",
      " is_alert 0 границы алерта квантилей:  4926.5 8492.0\n",
      "----------------------------------\n",
      "Метрика:  CTR\n",
      "2022-02-10 10:30:00 21.32385606397157\n",
      "2022-02-09 10:30:00 21.291624621594348\n",
      "2022-02-08 10:30:00 20.51726629099841\n",
      "2022-02-07 10:30:00 21.53339323150644\n",
      "2022-02-06 10:30:00 21.422222222222224\n",
      "2022-02-05 10:30:00 21.040482954545457\n",
      "2022-02-04 10:30:00 21.844912828519387\n",
      "2022-02-03 10:30:00 19.54169318905156\n",
      " last_week_value [21.29, 20.52, 21.53, 21.42, 21.04, 21.84, 19.54] \n",
      " current_value 21.32 \n",
      " mean_value 21.03\n",
      " diff 0.01\n",
      " is_alert 0 границы алерта 3х сигм:  20.31 21.74\n",
      " is_alert 0 границы алерта квантилей:  20.08 22.17\n",
      "----------------------------------\n",
      "Метрика:  users_messenger\n",
      "2022-02-10 10:30:00 147\n",
      "2022-02-09 10:30:00 109\n",
      "2022-02-08 10:30:00 112\n",
      "2022-02-07 10:30:00 129\n",
      "2022-02-06 10:30:00 132\n",
      "2022-02-05 10:30:00 134\n",
      "2022-02-04 10:30:00 136\n",
      "2022-02-03 10:30:00 150\n",
      " last_week_value [109, 112, 129, 132, 134, 136, 150] \n",
      " current_value 147 \n",
      " mean_value 128.86\n",
      " diff 0.12\n",
      " is_alert 1 границы алерта 3х сигм:  115.69 142.02\n",
      " is_alert 1 границы алерта квантилей:  106.0 149.5\n",
      "----------------------------------\n",
      "Метрика:  messages\n",
      "2022-02-10 10:30:00 182\n",
      "2022-02-09 10:30:00 153\n",
      "2022-02-08 10:30:00 147\n",
      "2022-02-07 10:30:00 160\n",
      "2022-02-06 10:30:00 178\n",
      "2022-02-05 10:30:00 174\n",
      "2022-02-04 10:30:00 175\n",
      "2022-02-03 10:30:00 198\n",
      " last_week_value [153, 147, 160, 178, 174, 175, 198] \n",
      " current_value 182 \n",
      " mean_value 169.29\n",
      " diff 0.07\n",
      " is_alert 0 границы алерта 3х сигм:  153.23 185.34\n",
      " is_alert 0 границы алерта квантилей:  136.5 196.5\n",
      "----------------------------------\n",
      "Метрика:  messages_per_user\n",
      "2022-02-10 10:30:00 1.238095238095238\n",
      "2022-02-09 10:30:00 1.4036697247706422\n",
      "2022-02-08 10:30:00 1.3125\n",
      "2022-02-07 10:30:00 1.2403100775193798\n",
      "2022-02-06 10:30:00 1.3484848484848484\n",
      "2022-02-05 10:30:00 1.2985074626865671\n",
      "2022-02-04 10:30:00 1.286764705882353\n",
      "2022-02-03 10:30:00 1.32\n",
      " last_week_value [1.4, 1.31, 1.24, 1.35, 1.3, 1.29, 1.32] \n",
      " current_value 1.24 \n",
      " mean_value 1.32\n",
      " diff 0.06\n",
      " is_alert 1 границы алерта 3х сигм:  1.27 1.36\n",
      " is_alert 1 границы алерта квантилей:  1.25 1.38\n",
      "----------------------------------\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import telegram\n",
    "import pandahouse\n",
    "from datetime import date\n",
    "import io\n",
    "from read_db.CH import Getch\n",
    "import sys\n",
    "import os\n",
    "\n",
    "\n",
    "def check_anomaly(df, metric, sigma, days = 7):\n",
    "    \n",
    "    \"\"\"\n",
    "    функция check_anomaly предлагает алгоритм проверки значения на аномальность посредством\n",
    "    сравнения текущего значения метрики со средненедельным показателем в 15 минутном интервале.\n",
    "\n",
    "    Параметры\n",
    "    ---------\n",
    "    df - датафрейм\n",
    "    metric - метрика кототорая проверяется\n",
    "    sigma - значение сигмы\n",
    "    days - число предыдущих дней, которые идут для определения аномалии.\n",
    "\n",
    "    Функция возвращает: \n",
    "    is_alert - запуск оповещения, 1 или 0\n",
    "    current_value - текущее значение метрики\n",
    "    diff - отклонение текущего значения от сравниваемого\n",
    "    \"\"\"\n",
    "\n",
    "    \n",
    "    # найдем список значений метрики за текущий и предыдущие дни\n",
    "    list_of_value = []\n",
    "    for n in range(0, days + 1):\n",
    "        current_ts = df['ts'].max()           # достаем максимальную 15-минутку из датафрейма - ту, которую будем проверять на аномальность\n",
    "        n_days_ago_ts = current_ts - pd.DateOffset(days=n)\n",
    "        n_days_ago_value = df[df['ts'] == n_days_ago_ts][metric].iloc[0] # достаем из датафрейма значение метрики в максимальную 15-минутку\n",
    "        list_of_value.append(round(n_days_ago_value, 2))\n",
    "        print(n_days_ago_ts, n_days_ago_value)\n",
    "\n",
    "     \n",
    "    # значение метрики в текущую 15-минутку, удаляем из общего списка\n",
    "    current_value = list_of_value.pop(0)\n",
    "    # рассчитываем значение от которого будет определяться вызов алерта\n",
    "    mean_value = np.mean(list_of_value)\n",
    "    print(' last_week_value', list_of_value, '\\n',\n",
    "          'current_value', current_value, '\\n', \n",
    "          'mean_value', round(mean_value, 2))\n",
    "    \n",
    "\n",
    "    # вычисляем отклонение\n",
    "    if current_value <= mean_value:\n",
    "        diff = abs(current_value / mean_value - 1)\n",
    "    else:\n",
    "        diff = abs(mean_value / current_value - 1)\n",
    "    print(' diff', round(diff, 2))\n",
    "\n",
    "    \n",
    "    # Вариант 1. Определяем верхние и нижние границы по правилу 3x сигм\n",
    "    low_sigm = mean_value - sigma * np.std(list_of_value)\n",
    "    upper_sigm = mean_value + sigma * np.std(list_of_value)\n",
    "    \n",
    "    \n",
    "    # Вариант 2. Определяем верхние и нижние границы межквартильного размаха\n",
    "    quant_25 = np.quantile(list_of_value, 0.25)\n",
    "    quant_75 = np.quantile(list_of_value, 0.75)\n",
    "    low_quant = quant_25 - sigma * (quant_75 - quant_25)\n",
    "    upper_quant = quant_75 + sigma * (quant_75 - quant_25)\n",
    "    \n",
    "    \n",
    "    # Методы на основе ML\n",
    "    # Вариант 3. DBSCAN (Density-based spatial clustering of applications with noise)\n",
    "    # Вариант 4. LOF (Local Outlier Factor)\n",
    "    \n",
    "    \n",
    "    # Проверяем вызов алерта\n",
    "    ''' Настроим аллерт на на одновременную проверку границ 3мя сигмам и межквартильным размахом, но при высокой сигме.\n",
    "        Поскольку при маленькой выборке, но высокой волатильности и высокой сигме межквартильный размах устанавливает \n",
    "        слишком широкие границы для активации алерта'''\n",
    "    if (current_value < (low_sigm or low_quant)\n",
    "       or current_value > (upper_sigm or upper_quant)):\n",
    "            is_alert = 1\n",
    "    else:\n",
    "            is_alert = 0\n",
    "    print(' is_alert', is_alert, 'границы алерта 3х сигм: ', round(low_sigm, 2), round(upper_sigm, 2))\n",
    "    print(' is_alert', is_alert, 'границы алерта квантилей: ', round(low_quant, 2), round(upper_quant, 2))\n",
    "    print('----------------------------------')\n",
    "    return is_alert, current_value, diff\n",
    "\n",
    "\n",
    "\n",
    "def run_alerts(chat=2093549033, sigma = 1):\n",
    "    \n",
    "    \"\"\"\n",
    "    Функция run_alerts запускает подключение к базе данных, выполняет запрос на проверку \n",
    "    метрик на аномалии, а также формирует информацию для отчета в telegram\n",
    "    \n",
    "    Параметры\n",
    "    ---------\n",
    "    chat - chat_id telegram для отправки сообщения\n",
    "    sigma - значение сигмы\n",
    "    \"\"\"\n",
    "    \n",
    "    \n",
    "    # Информация о боте telegram\n",
    "    chat_id = chat or -655725590\n",
    "    bot = telegram.Bot(token='*****************************************************')\n",
    "    \n",
    "\n",
    "    # Формирование запроса к базе данных\n",
    "    querry = '''SELECT *\n",
    "                FROM\n",
    "                    (select toStartOfFifteenMinutes(time) as ts,\n",
    "                        toDate(time) as date,\n",
    "                        formatDateTime(ts, '%R') as hm,\n",
    "                        count(distinct user_id) as users_lenta,\n",
    "                        countIf(user_id, action='like') as likes,\n",
    "                        countIf(user_id, action='view') as views,\n",
    "                        countIf(user_id, action = 'like') / countIf(user_id, action = 'view') * 100 as CTR\n",
    "                    from simulator_20220120.feed_actions\n",
    "                    where ts >=  today() - 7 and ts < toStartOfFifteenMinutes(now())\n",
    "                    group by ts, date, hm) t1\n",
    "                FULL JOIN\n",
    "                    (select toStartOfFifteenMinutes(time) as ts,\n",
    "                        toDate(time) as date,\n",
    "                        formatDateTime(ts, '%R') as hm,\n",
    "                        count(distinct user_id) as users_messenger,\n",
    "                        count(user_id) as messages,\n",
    "                        messages/users_messenger as messages_per_user\n",
    "                    from simulator_20220120.message_actions\n",
    "                    where ts >=  today() - 7 and ts < toStartOfFifteenMinutes(now())\n",
    "                    group by ts, date, hm\n",
    "                    order by toDate(time) DESC) t2 using ts, date, hm\n",
    "                ORDER BY ts DESC'''\n",
    "    \n",
    "    # Датафрейм для проферки анамалий\n",
    "    data = Getch(querry).df\n",
    "\n",
    "    \n",
    "    # Проверка группы метрик на анамалии\n",
    "    metrics = data.columns[3:]\n",
    "    for metric in metrics:\n",
    "        print('Метрика: ', metric)\n",
    "        # проверяем метрику на аномальность алгоритмом, описаным внутри функции check_anomaly()\n",
    "        is_alert, current_value, diff = check_anomaly(data, metric, sigma)\n",
    "        if is_alert:\n",
    "            \n",
    "            # Строим графики\n",
    "            sns.set(rc={'figure.figsize': (16, 10)}) # задаем размер графика\n",
    "            plt.tight_layout() # плотная компоновка\n",
    "\n",
    "            \n",
    "            # визуализация метрики за сегодняшний день\n",
    "            ax = sns.lineplot(data=data[data.date == data.date.unique()[0]].sort_values(by=['date', 'hm']), \n",
    "                              x=\"hm\", \n",
    "                              y=metric,\n",
    "                              label = '{metric}, {day}'.format(metric = metric,\n",
    "                                                              day = data['date'].dt.date[0]))\n",
    "\n",
    "            \n",
    "            # при сигма 1/ 2/ 3 доверительный интервал соответственно равен 68,3% / 95,5% / 99,7%\n",
    "            if sigma == 1:\n",
    "                ci = 68.3\n",
    "            elif sigma == 2:\n",
    "                ci = 95.5\n",
    "            else:\n",
    "                ci = 99.7\n",
    "\n",
    "                \n",
    "            # визуализация среднего значения и доверительного интервала за предыдущую неделю\n",
    "            ax = sns.lineplot(data=data[data.date < data.date.unique()[0]].sort_values(by=['date', 'hm']), \n",
    "                              x=\"hm\",\n",
    "                              y=metric,\n",
    "                              ci=ci,\n",
    "                              label='{sigma} sigma range + rolling mean, 1 week before:'.format(sigma = sigma))\n",
    "\n",
    "            \n",
    "            # разряжаем подписи по оси X\n",
    "            for ind, label in enumerate(ax.get_xticklabels()):\n",
    "                if ind % 15 == 0:\n",
    "                    label.set_visible(True)\n",
    "                else:\n",
    "                    label.set_visible(False)\n",
    "            \n",
    "            \n",
    "            ax.set(xlabel='time') # задаем имя оси Х\n",
    "            ax.set(ylabel=metric) # задаем имя оси У\n",
    "            ax.set_title('{}'.format(metric)) # задаем заголовок графика\n",
    "            ax.set(ylim=(0, None)) # задаем лимит для оси У\n",
    "            \n",
    "            \n",
    "            # Создаем ссылку на актуальный дашборд\n",
    "            half_link = ['17204', '17197', '17205', '17206', '17207', '17208', '17209']\n",
    "            link = dict(zip(metrics, half_link))\n",
    "            \n",
    "            \n",
    "            # Формируем сообщение для отправки\n",
    "            msg = '''Метрика {metric}:\\n- текущее значение: {current_value:.2f}\n",
    "- отклонение от скользящего среднего за неделю: {diff:.2%}\\nДоп. информация по метрике:\n",
    "https://redash.lab.karpov.courses/queries/7664#{link}'''.format(metric=metric,\n",
    "                                                               current_value=current_value,\n",
    "                                                               diff=diff,\n",
    "                                                               link=link.get(metric, None))\n",
    "            \n",
    "            # формируем файловый объект\n",
    "            plot_object = io.BytesIO()\n",
    "            ax.figure.savefig(plot_object)\n",
    "            plot_object.seek(0)\n",
    "            plot_object.name = '{0}.png'.format(metric)\n",
    "            plt.close()\n",
    "\n",
    "            # отправляем алерт\n",
    "            bot.sendMessage(chat_id=chat_id, text=msg)\n",
    "            bot.sendPhoto(chat_id=chat_id, photo=plot_object)\n",
    "\n",
    "\n",
    "try:\n",
    "    run_alerts()\n",
    "except Exception as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73cd3680-1b25-48e7-adba-032a39a2f9e5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
